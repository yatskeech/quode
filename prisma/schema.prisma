generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  password      String?
  id            Int        @id @default(autoincrement())
  accounts      Account[]
  solutions     Solution[]
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Problem {
  title       String
  description String
  coverImage  String?
  timeLimit   Int      @default(1000)
  memoryLimit Int      @default(128)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  difficulty  Difficulty @default(medium)
  id          Int        @id @default(autoincrement())
  solutions   Solution[]
  templates   Template[]
  tests       Test[]
}

model Test {
  language    Language
  input       String
  expected    String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  id          Int      @id @default(autoincrement())
  problemId   Int
  wrapperCode String
  problem     Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([problemId, language, order])
}

model Template {
  language  Language
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
  problemId Int
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([problemId, language])
}

model Solution {
  language    Language
  code        String
  status      String
  passedCount Int      @default(0)
  totalCount  Int      @default(0)
  submittedAt DateTime @default(now())
  details     Json?
  id          Int      @id @default(autoincrement())
  userId      Int
  problemId   Int
  problem     Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, problemId])
}

enum Language {
  javascript
  python
}

enum Difficulty {
  easy
  medium
  hard
}
